// Code generated by protoc-gen-go.
// source: packet.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	packet.proto

It has these top-level messages:
	Token
	Packet
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Packet_PacketType int32

const (
	Packet_LOG   Packet_PacketType = 0
	Packet_EVENT Packet_PacketType = 1
	Packet_PERF  Packet_PacketType = 2
)

var Packet_PacketType_name = map[int32]string{
	0: "LOG",
	1: "EVENT",
	2: "PERF",
}
var Packet_PacketType_value = map[string]int32{
	"LOG":   0,
	"EVENT": 1,
	"PERF":  2,
}

func (x Packet_PacketType) String() string {
	return proto.EnumName(Packet_PacketType_name, int32(x))
}
func (Packet_PacketType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Token struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Packet struct {
	Id     Packet_PacketType `protobuf:"varint,1,opt,name=id,enum=main.Packet_PacketType" json:"id,omitempty"`
	Msg    []string          `protobuf:"bytes,2,rep,name=msg" json:"msg,omitempty"`
	Source string            `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Token)(nil), "main.Token")
	proto.RegisterType((*Packet)(nil), "main.Packet")
	proto.RegisterEnum("main.Packet_PacketType", Packet_PacketType_name, Packet_PacketType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ConduitAgent service

type ConduitAgentClient interface {
	Pull(ctx context.Context, opts ...grpc.CallOption) (ConduitAgent_PullClient, error)
}

type conduitAgentClient struct {
	cc *grpc.ClientConn
}

func NewConduitAgentClient(cc *grpc.ClientConn) ConduitAgentClient {
	return &conduitAgentClient{cc}
}

func (c *conduitAgentClient) Pull(ctx context.Context, opts ...grpc.CallOption) (ConduitAgent_PullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ConduitAgent_serviceDesc.Streams[0], c.cc, "/main.ConduitAgent/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &conduitAgentPullClient{stream}
	return x, nil
}

type ConduitAgent_PullClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type conduitAgentPullClient struct {
	grpc.ClientStream
}

func (x *conduitAgentPullClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conduitAgentPullClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ConduitAgent service

type ConduitAgentServer interface {
	Pull(ConduitAgent_PullServer) error
}

func RegisterConduitAgentServer(s *grpc.Server, srv ConduitAgentServer) {
	s.RegisterService(&_ConduitAgent_serviceDesc, srv)
}

func _ConduitAgent_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConduitAgentServer).Pull(&conduitAgentPullServer{stream})
}

type ConduitAgent_PullServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type conduitAgentPullServer struct {
	grpc.ServerStream
}

func (x *conduitAgentPullServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conduitAgentPullServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConduitAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConduitAgent",
	HandlerType: (*ConduitAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _ConduitAgent_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for ConduitServer service

type ConduitServerClient interface {
	Push(ctx context.Context, opts ...grpc.CallOption) (ConduitServer_PushClient, error)
}

type conduitServerClient struct {
	cc *grpc.ClientConn
}

func NewConduitServerClient(cc *grpc.ClientConn) ConduitServerClient {
	return &conduitServerClient{cc}
}

func (c *conduitServerClient) Push(ctx context.Context, opts ...grpc.CallOption) (ConduitServer_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ConduitServer_serviceDesc.Streams[0], c.cc, "/main.ConduitServer/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &conduitServerPushClient{stream}
	return x, nil
}

type ConduitServer_PushClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type conduitServerPushClient struct {
	grpc.ClientStream
}

func (x *conduitServerPushClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conduitServerPushClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ConduitServer service

type ConduitServerServer interface {
	Push(ConduitServer_PushServer) error
}

func RegisterConduitServerServer(s *grpc.Server, srv ConduitServerServer) {
	s.RegisterService(&_ConduitServer_serviceDesc, srv)
}

func _ConduitServer_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConduitServerServer).Push(&conduitServerPushServer{stream})
}

type ConduitServer_PushServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type conduitServerPushServer struct {
	grpc.ServerStream
}

func (x *conduitServerPushServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conduitServerPushServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConduitServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConduitServer",
	HandlerType: (*ConduitServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _ConduitServer_Push_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("packet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x48, 0x4c, 0xce,
	0x4e, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x92,
	0xe7, 0x62, 0x0d, 0xc9, 0xcf, 0x4e, 0xcd, 0x13, 0x12, 0xe3, 0x62, 0x4b, 0xc9, 0x07, 0x09, 0x49,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x4a, 0xed, 0x8c, 0x5c, 0x6c, 0x01, 0x60, 0x7d,
	0x42, 0xea, 0x5c, 0x4c, 0x99, 0x29, 0x60, 0x69, 0x3e, 0x23, 0x71, 0x3d, 0x90, 0xac, 0x1e, 0x44,
	0x06, 0x4a, 0x85, 0x54, 0x16, 0xa4, 0x06, 0x01, 0x95, 0x08, 0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7,
	0x4b, 0x30, 0x29, 0x30, 0x03, 0x0d, 0x02, 0x31, 0x41, 0xa6, 0x17, 0xe7, 0x97, 0x16, 0x25, 0xa7,
	0x4a, 0x30, 0x43, 0x4c, 0x87, 0xf0, 0x94, 0xb4, 0xb8, 0xb8, 0x10, 0x7a, 0x85, 0xd8, 0xb9, 0x98,
	0x7d, 0xfc, 0xdd, 0x05, 0x18, 0x84, 0x38, 0xb9, 0x58, 0x5d, 0xc3, 0x5c, 0xfd, 0x42, 0x04, 0x18,
	0x85, 0x38, 0xb8, 0x58, 0x02, 0x5c, 0x83, 0xdc, 0x04, 0x98, 0x8c, 0x2c, 0xb8, 0x78, 0x9c, 0xf3,
	0xf3, 0x52, 0x4a, 0x33, 0x4b, 0x1c, 0xd3, 0x53, 0xf3, 0x4a, 0x84, 0x34, 0x80, 0x32, 0xa5, 0x39,
	0x39, 0x42, 0x3c, 0xc8, 0x4e, 0x91, 0x42, 0xe1, 0x29, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x1a, 0x59,
	0x72, 0xf1, 0x42, 0x75, 0x06, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x41, 0xb4, 0x16, 0x67, 0x10, 0xd6,
	0x9a, 0xc4, 0x06, 0x0e, 0x2c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x4a, 0x36, 0xf0,
	0x3c, 0x01, 0x00, 0x00,
}
